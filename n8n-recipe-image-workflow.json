{
  "name": "Complete Recipe Generator with Chatbot",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "generate-recipe",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "complete-recipe-generator"
    },
    {
      "parameters": {
        "jsCode": "// Extract ingredients and dietary preferences from webhook payload\nconst payload = $input.first().json;\nconst ingredients = payload.ingredients || [];\nconst dietaryPreferences = payload.dietaryPreferences || [];\nconst userId = payload.userId;\n\n// Validate input\nif (!ingredients || ingredients.length === 0) {\n  throw new Error('No ingredients provided');\n}\n\n// Return data for processing\nreturn {\n  json: {\n    ingredients: ingredients,\n    dietaryPreferences: dietaryPreferences,\n    userId: userId\n  }\n};"
      },
      "id": "parse-input",
      "name": "Parse Input",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "jsCode": "// Generate recipe prompt for GPT-4\nconst data = $input.first().json;\nconst ingredients = data.ingredients.map(ing => `${ing.name} (${ing.quantity})`).join(', ');\nconst dietaryPrefs = data.dietaryPreferences.length > 0 ? \n  `Dietary preferences: ${data.dietaryPreferences.join(', ')}. ` : '';\n\nconst prompt = `Create a delicious recipe using these ingredients: ${ingredients}. ${dietaryPrefs}\n\nPlease provide the recipe in this exact JSON format:\n{\n  \"name\": \"Recipe Name\",\n  \"ingredients\": [\n    {\"name\": \"Ingredient Name\", \"quantity\": \"Amount\"}\n  ],\n  \"instructions\": [\n    \"Step 1\",\n    \"Step 2\"\n  ],\n  \"dietaryPreference\": [\"vegan\", \"gluten-free\"],\n  \"additionalInformation\": {\n    \"tips\": \"Cooking tips\",\n    \"variations\": \"Recipe variations\",\n    \"servingSuggestions\": \"How to serve\",\n    \"nutritionalInformation\": \"Nutritional info\"\n  }\n}\n\nMake sure the recipe is creative, delicious, and follows the dietary preferences if specified.`;\n\nreturn {\n  json: {\n    prompt: prompt,\n    userId: data.userId\n  }\n};"
      },
      "id": "generate-recipe-prompt",
      "name": "Generate Recipe Prompt",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "operation": "createChatCompletion",
        "model": "gpt-4o",
        "messages": "={{ [{ \"role\": \"user\", \"content\": $json.prompt }] }}",
        "maxTokens": 1500,
        "options": {}
      },
      "id": "generate-recipe",
      "name": "Generate Recipe (GPT-4)",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [900, 300],
      "credentials": {
        "openAiApi": {
          "id": "openai-credentials",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Parse the recipe from GPT-4 response\nconst gptResponse = $input.first().json;\nconst recipeText = gptResponse.choices[0].message.content;\n\n// Try to extract JSON from the response\nlet recipe;\ntry {\n  // Find JSON in the response (it might be wrapped in markdown)\n  const jsonMatch = recipeText.match(/\\{[\\s\\S]*\\}/);\n  if (jsonMatch) {\n    recipe = JSON.parse(jsonMatch[0]);\n  } else {\n    throw new Error('No JSON found in response');\n  }\n} catch (error) {\n  // If parsing fails, create a basic recipe structure\n  recipe = {\n    name: \"Generated Recipe\",\n    ingredients: [],\n    instructions: [recipeText],\n    dietaryPreference: [],\n    additionalInformation: {\n      tips: \"\",\n      variations: \"\",\n      servingSuggestions: \"\",\n      nutritionalInformation: \"\"\n    }\n  };\n}\n\nreturn {\n  json: {\n    recipe: recipe,\n    userId: $('Generate Recipe Prompt').first().json.userId\n  }\n};"
      },
      "id": "parse-recipe",
      "name": "Parse Recipe",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "jsCode": "// Generate DALLÂ·E prompt for the recipe\nconst data = $input.first().json;\nconst recipe = data.recipe;\nconst ingredients = recipe.ingredients.map(ing => `${ing.name} (${ing.quantity})`).join(', ');\n\nconst prompt = `Create a high-resolution, photorealistic image of a delicious ${recipe.name} made of these ingredients: ${ingredients}. The image should be visually appealing, showcasing the dish in an appetizing manner. It should be plated attractively on a clean white plate with natural lighting, highlighting key ingredients for visual appeal.`;\n\nreturn {\n  json: {\n    prompt: prompt,\n    recipe: recipe,\n    userId: data.userId\n  }\n};"
      },
      "id": "generate-image-prompt",
      "name": "Generate Image Prompt",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "operation": "createImage",
        "prompt": "={{ $json.prompt }}",
        "model": "dall-e-3",
        "size": "1024x1024",
        "quality": "standard",
        "style": "vivid",
        "n": 1,
        "options": {}
      },
      "id": "generate-image",
      "name": "Generate Image (DALL-E)",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [1560, 300],
      "credentials": {
        "openAiApi": {
          "id": "openai-credentials",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Combine recipe and image data\nconst imageData = $input.first().json;\nconst recipeData = $('Generate Image Prompt').first().json;\nconst recipe = recipeData.recipe;\nconst userId = recipeData.userId;\n\n// Extract image URL\nconst imageUrl = imageData.data[0].url;\n\n// Create the complete response\nconst completeRecipe = {\n  ...recipe,\n  imgLink: imageUrl,\n  userId: userId,\n  openaiPromptId: `generated-${Date.now()}`\n};\n\nreturn {\n  json: {\n    recipe: completeRecipe,\n    success: true\n  }\n};"
      },
      "id": "combine-data",
      "name": "Combine Recipe & Image",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1780, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "id": "webhook-response",
      "name": "Return Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2000, 300]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "chat-assistant",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "chat-webhook-trigger",
      "name": "Chat Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 600],
      "webhookId": "chat-assistant"
    },
    {
      "parameters": {
        "jsCode": "// Extract chat message and recipe context from webhook payload\nconst payload = $input.first().json;\nconst message = payload.message;\nconst recipeId = payload.recipeId;\nconst history = payload.history || [];\nconst userId = payload.userId;\n\n// Validate input\nif (!message || !recipeId) {\n  throw new Error('Message and recipeId are required');\n}\n\nreturn {\n  json: {\n    message: message,\n    recipeId: recipeId,\n    history: history,\n    userId: userId\n  }\n};"
      },
      "id": "parse-chat-input",
      "name": "Parse Chat Input",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 600]
    },
    {
      "parameters": {
        "jsCode": "// Generate chat system prompt based on recipe context\nconst data = $input.first().json;\nconst recipe = data.recipe; // This will come from the recipe lookup\nconst message = data.message;\nconst history = data.history;\n\nconst systemPrompt = `You are a helpful cooking assistant for the recipe: ${recipe.name}\n\nRecipe Details:\n- Ingredients: ${recipe.ingredients.map(ing => `${ing.name} (${ing.quantity})`).join(', ')}\n- Instructions: ${recipe.instructions.join('\\n')}\n- Dietary Preferences: ${recipe.dietaryPreference.join(', ')}\n- Tips: ${recipe.additionalInformation.tips}\n- Variations: ${recipe.additionalInformation.variations}\n- Serving Suggestions: ${recipe.additionalInformation.servingSuggestions}\n- Nutritional Info: ${recipe.additionalInformation.nutritionalInformation}\n\nYou can help with:\n- Ingredient substitutions\n- Cooking techniques\n- Dietary modifications\n- Serving suggestions\n- Nutritional questions\n- Recipe variations\n- Cooking tips\n\nKeep responses helpful, accurate, and focused on this specific recipe.`;\n\nreturn {\n  json: {\n    systemPrompt: systemPrompt,\n    message: message,\n    history: history,\n    recipe: recipe,\n    userId: data.userId\n  }\n};"
      },
      "id": "generate-chat-prompt",
      "name": "Generate Chat Prompt",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 600]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "operation": "createChatCompletion",
        "model": "gpt-4o",
        "messages": "={{ [{ \"role\": \"system\", \"content\": $json.systemPrompt }, ...$json.history, { \"role\": \"user\", \"content\": $json.message }] }}",
        "maxTokens": 1000,
        "options": {}
      },
      "id": "generate-chat-response",
      "name": "Generate Chat Response (GPT-4)",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [900, 600],
      "credentials": {
        "openAiApi": {
          "id": "openai-credentials",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Extract chat response\nconst gptResponse = $input.first().json;\nconst reply = gptResponse.choices[0].message.content;\nconst totalTokens = gptResponse.usage.total_tokens;\n\nreturn {\n  json: {\n    reply: reply,\n    totalTokens: totalTokens,\n    success: true\n  }\n};"
      },
      "id": "extract-chat-response",
      "name": "Extract Chat Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 600]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "id": "chat-webhook-response",
      "name": "Chat Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1340, 600]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Parse Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Input": {
      "main": [
        [
          {
            "node": "Generate Recipe Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Recipe Prompt": {
      "main": [
        [
          {
            "node": "Generate Recipe (GPT-4)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Recipe (GPT-4)": {
      "main": [
        [
          {
            "node": "Parse Recipe",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Recipe": {
      "main": [
        [
          {
            "node": "Generate Image Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Image Prompt": {
      "main": [
        [
          {
            "node": "Generate Image (DALL-E)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Image (DALL-E)": {
      "main": [
        [
          {
            "node": "Combine Recipe & Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Recipe & Image": {
      "main": [
        [
          {
            "node": "Return Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chat Webhook Trigger": {
      "main": [
        [
          {
            "node": "Parse Chat Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Chat Input": {
      "main": [
        [
          {
            "node": "Generate Chat Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Chat Prompt": {
      "main": [
        [
          {
            "node": "Generate Chat Response (GPT-4)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Chat Response (GPT-4)": {
      "main": [
        [
          {
            "node": "Extract Chat Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Chat Response": {
      "main": [
        [
          {
            "node": "Chat Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1"
} 